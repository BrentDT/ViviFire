/*
 * ViviFire Programming Language
 *
 * Copyright 2023 Brent D. Thorn
 *
 * You can get the latest version at http://vivifire.com/.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */

#include <algorithm>
#include <assert.h>
#include <cstdio>
#include <cwctype>
#include <map>
#include <memory>
#include <string>
#include <time.h>
#include <vector>
#if defined(_WIN32)
#include <windows.h>
#endif
#include "Args.h"
#include "AST.h"
#include "Modifier.h"

#if __cplusplus >= 201703L // C++17
#include <filesystem>
#define S_PATH_SEP std::filesystem::path::preferred_separator
#elif defined(_WIN32)
#define S_PATH_SEP L"\\"
#else
#define S_PATH_SEP L"/"
#endif

// IMPORTANT: Use this macro with all productions.
// 'SyncNewline' gets passed 's_name'.
#define ID(sn, iv) \
	static const wchar_t *s_name = sn; \
	if (args.v >= Args::iv) wprintf(L">%ls", s_name);

extern Args args;

COMPILER ViviFire

// The root of the AST. Memory is not freed automatically.
AST::Module *module = nullptr;

// Something to keep track of nested blocks.
std::vector<int> context;

// Some enumeration types.
enum case_type { CASE_ZERO, CASE_EXPR, CASE_ELSE };
enum option_type { OPTION_DEFAULT, WITH_THEN, WITHOUT_THEN };
enum select_type { SELECT_DEFAULT, SELECT_ELSE, SELECT_ELSE_STRING };
enum ternary { TERNARY0, TERNARY1, TERNARY2, YES = TERNARY1, NO = TERNARY2 };

// Aliases for 'true' and 'false'.
enum { NO_BITS, YES_BITS };
enum { POSTCONDITIONAL, PRECONDITIONAL };

// Type aliases.
typedef std::map<std::wstring, int> when_map;

// Hold options for the directive '@OPTION'.
struct tag_option {
	Parser*     parser;
	bool        arg_by_name_bool = false;
	bool        arg_by_name_lit = false;
	bool        charset_latin   = false; // TODO: swap in a different scanner.
	ternary     Dim_or_Var      = TERNARY0;
	ternary     End_block       = TERNARY0;
	ternary     End_For_id      = TERNARY0;
	bool        Enum_id         = false;
	bool        Enum_Is         = false;
	bool        Enum_equals     = false;
	ternary     If_Then         = TERNARY0;
	bool        If_End          = false;
	bool        last            = false;
	bool        Mod_floored     = false;
	bool        New             = false;
	bool        Optional_equals = false;
	ternary     Select_Case     = TERNARY0;
	select_type Select_Else     = SELECT_DEFAULT;
	ternary     String_bk_slash = TERNARY0;
	bool        test            = false;
	bool        unit_full       = false;
	short       warning         = 4;
	short       warning_error   = 0;
	ternary     When_Each_Else  = TERNARY0;
	bool        When_Begin_id   = false;

	bool match(const wchar_t *s) {
		return parser->Match(s);
	}

	bool left_match(const wchar_t *s) const {
		// Returns true if next token starts with s, then consumes it.
		std::unique_ptr<wchar_t> lcval(coco_string_create_lower(parser->la->val));
		if (parser->la->kind != _identifier || wcsstr(lcval.get(), s) != lcval.get()) return false;
		parser->Get();
		return true;
	}

	void option_error() const {
		parser->SemErr(L"Unknown or missing option");
	}

	void optional_no(int kind, const wchar_t *id = nullptr) const {
		// Test for optional "No" plus token.
		if (parser->Match(L"no")) {
			if (parser->la->kind == kind) {
				if (_identifier == kind) parser->Match(id);
				else parser->Get();
				return;
			}
			option_error();
		}
	}

	void Parse() {
		static const wchar_t *s_block = L"block", *s_equals = L"equals", *s_id = L"id", *s_warning = L"warning";
		if (last) parser->SemErr(L"@OPTION not permitted after LAST");
		parser->Get();
		switch (parser->la->kind) {
		case _Dim:
			parser->Get();
			Dim_or_Var = TERNARY1;      // @Option Dim
			break;
		case _Var:
			parser->Get();
			Dim_or_Var = TERNARY2; // @Option Var
			break;
		case _End:
			parser->Get();
			if (_For == parser->la->kind) { // End For
				parser->Get();
				optional_no(_identifier, s_id);
				End_For_id = NO; // @Option End For [ no id ]
			} else if (match(s_block)) {
				End_block = YES; // @Option End Block
			} else {
				optional_no(_identifier, s_block);
				End_block = NO; // @Option End [ No Block ]
			}
			break;
		case _Enum:
			parser->Get();
			if (match(s_id)) {
				Enum_id = true;           // @Option Enum ID
			} else if (parser->la->kind == _Is) {
				parser->Get();
				Enum_Is = true;  // @Option Enum Is
			} else if (match(s_equals)) {
				Enum_equals = true; // @Option Enum Equals
			} else goto bad_option;
			break;
		case _If:
			parser->Get();
			if (_End == parser->la->kind) {
				parser->Get();
				If_End = true; // @Option If End
			} else if (_Then == parser->la->kind) {
				parser->Get();
				If_Then = YES;                    // @Option If Then
			} else {
				optional_no(_Then);
				If_Then = NO; // @Option If [ No Then ]
			}
			break;
		case _Mod:
			parser->Get();
			if (match(L"Floored")) {
				Mod_floored = true; // @Option Mod Floored
			} else goto bad_option;
			break;
		case _New:
			parser->Get();
			New = true; // @Option New
			break;
		case _Optional:
			parser->Get();
			if (match(s_equals)) {
				Optional_equals = true; // @Option Optional Equals
			} else goto bad_option;
			break;
		case _Select:
			parser->Get();
			if (_Else == parser->la->kind) {
				parser->Get();
				if (_String == parser->la->kind) {
					parser->Get();
					Select_Else = SELECT_ELSE_STRING; // @Option SELECT ELSE STRING
				} else {
					Select_Else = SELECT_ELSE; // @Option SELECT ELSE
				}
			} else if (_Case == parser->la->kind) {
				parser->Get();
				Select_Case = YES;                      // @Option SELECT CASE
			} else {
				optional_no(_Case);
				Select_Case = NO; // @Option Select [ No Case ]
			}
			break;
		case _String:
			parser->Get();
			if (match(L"backslash")) {
				String_bk_slash = TERNARY1; // @Option String Backslash
			}else if (match(L"slash")) {
				String_bk_slash = TERNARY2; // @Option String Slash
			} else goto bad_option;
			break;
		case _Unit:
			parser->Get();
			if (match(L"full")) {
				unit_full = true; // @Option Unit Full
			} else goto bad_option;
			break;
		case _When:
			parser->Get();
			if (_Each == parser->la->kind) {
				parser->Get();
				When_Each_Else = TERNARY1; // @Option When Each
			} else if (_Else == parser->la->kind) {
				parser->Get();
				When_Each_Else = TERNARY2; // @Option When Else
			} else if (_Begin == parser->la->kind) {
				parser->Get();
				if (match(s_id)) {
					When_Begin_id = true; // @Option When Begin ID
				} else goto bad_option;
			} else goto bad_option;
			break;
		case _identifier: {
			// For each addition, remember to "break" when correct.
			int len = coco_string_length(parser->la->val);
			if (9 == len && match(L"argbyname")) {
				if (_Boolean == parser->la->kind) {
					parser->Get();
					arg_by_name_bool = true; // @Option ArgByName Boolean
					break;
				} else if (match(L"literal")) {
					arg_by_name_lit = true; // @Option ArgByName Literal
					break;
				}
			}else if (4 == len && match(L"last")) {
				last = true; // @Option Last
				break;
			} else if (4 == len && match(L"test")) {
				test = true; // @Option Test
				break;
			} else if (len >= 7 && left_match(s_warning)) {
				short level = (short)parser->t->val[coco_string_length(s_warning)]; // Valid: '\0', '1', '2', '3', '4', & '5'.
				if (level == 0) {
					level = L'4'; // Default is 4.
				} else if (level < L'1' || level > L'5') goto bad_option;
				level -= L'0';
				if (match(L"error")) {
					warning_error = level; // @Option Warning[1-5] Error
					break;
				} else {
					warning = level; // @Option Warning[1-5]
					break;
				}
			}
			// Fall through for error
		}
		default:
		bad_option:
			parser->Get();
			option_error();
			break;
		}
		if (parser->la->kind != _line_break && parser->la->kind != _EOF) goto bad_option;
	}

} option = { /* parser */ this };

// Parse elements that are usually optional, but can become mandatory by '@OPTION'.
// Param 'nOption' can give more context.
void Optional(int kind, option_type nOption = OPTION_DEFAULT) {
	switch (kind) {
	case _Case:  // Select [ Case ]
		if (la->kind == _Case) {
			Get();
			if (option.Select_Case == NO) SemErr(L"SELECT cannot have CASE because of @OPTION");
		}
		else if (option.Select_Case == YES) SemErr(L"SELECT must have CASE because of @OPTION");
		break;
	case _Class:        // End [ Class ]
	case _Constructor:  // End [ Constructor ]
	case _Declare:      // End [ Declare ]
	case _Destructor:   // End [ Destructor ]
	case _Enum:         // End [ Enum ]
	case _Function:     // End [ Function ]
	case _If:           // End [ If ]
	case _Method:       // End [ Method ]
///	case _Namespace:    // End [ Namespace ]
	case _Object:       // End [ Object ]
	case _Property:     // End [ Property ]
	case _Select:       // End [ Select ]
	case _Struct:       // End [ Struct ]
	case _Sub:          // End [ Sub ]
	case _Trait:        // End [ Trait ]
	case _Try:          // End [ Try ]
	case _While:  // End [ While ]
		if (la->kind == _line_break) { // END without block type.
			if (option.End_block == YES) SemErr(L"END must have block type because of @OPTION");
		} else { // END with block type.
			if (option.End_block == NO) {
				Get();
				SemErr(L"END cannot have block type because of @OPTION");
			} else if (la->kind != kind) { // Incorrect block type.
				Expect(kind);
			} else {
				Get();
			}
		}
		break;
	case _For:  // End [ For [ name ] ]
		if (la->kind == _For) {
			Get();
			if (option.End_block == NO) SemErr(L"END cannot have block type because of @OPTION");
			if (IsIdentifier(la->kind)) {
				Name();
				if (option.End_For_id == NO) SemErr(L"END FOR cannot have name because of @OPTION");
			}
			else if (option.End_For_id == YES) SemErr(L"END FOR must have name because of @OPTION");
		}
		//TODO: else if (end_block)
		break;
	case _Then:
		if (nOption == OPTION_DEFAULT && la->kind == _Then) {
			nOption = WITH_THEN;
			Get();
		}
		if (nOption == WITH_THEN && option.If_Then == NO)
			SemErr(L"IF cannot have THEN because of @OPTION");
		else if (nOption == WITHOUT_THEN && option.If_Then == YES)
			SemErr(L"IF must have THEN because of @OPTION");
		break;
	default:
		#if defined(DEBUG)
		errors->Exception(L"Bad kind in Optional");
		#endif
		break;
	}
}

class param_validator {
	Parser *m_parser;
	int m_parent;
	int m_count = 0;
	bool m_byref = false;
	int m_optionals = 0;
public:
	param_validator(Parser *parser, int parent): m_parser(parser), m_parent(parent) {}
	void add(int modif = 0) {
		m_count++;
		if (_Set == m_parent && 2 == m_count) m_parser->SemErr(L"SET must have one parameter");
		switch (modif) {
		case 0:
			m_byref = false;  // by value
			break;
		case _ByRef:
			if (m_optionals) m_parser->SemErr(L"Optional parameter cannot be BYREF");
			else m_byref = true;
			break;
		case _Optional:
			if (m_optionals == 1) m_parser->Warn(L"OPTIONAL is not necessary again");
			else m_optionals++;
			break;
		default:
			#if defined(DEBUG)
			m_parser->errors->Exception(L"Bad kind in param_validator::modifier");
			#endif
			break;
		}
	}
	void none() const {
		if (_Set == m_parent) m_parser->SemErr(L"SET must have one parameter");
	}
	bool optional() const { return (m_optionals != 0); }
};

bool Match(const wchar_t *s) {
	// Returns true if the next token is the same as s, then consumes it.
	assert(s != nullptr);
	if (la->kind != _identifier || _wcsicmp(s, la->val) != 0) return false;
	Get();
	return true;
}

bool Matches(const wchar_t *s) {
	// Returns true if the current token is the same as s.
	assert(s != nullptr);
	return (_wcsicmp(s, t->val) == 0);
}

std::wstring StringValue(wchar_t *s) {
	// Returns the string value of a string literal or constant.
	assert(s != nullptr);
	assert(s[0] == L'"' || s[0] == L'_' || s[0] == L'$');

	if (s[0] == L'_') s++; // Ignore leading underscore.

	if (s[0] == L'"') { // Quoted string literal.
		// Remove unnecessary quotes.
		std::wstring res;
		for (wchar_t *p = s + 1; *p; p++) {
			if (*p != L'"') res += *p;
			else if (p[1] == L'"') res += *p++; // Two quotes become one.
			// End quote is skipped automatically.
		}
		return res;
	} else if (s[0] == L'$') { // String constant.
		// Handle character codes. Make sure to return if valid.
		// Named constants are handled after these.
		switch (s[1]) {
		case L'B': case L'b': { // Binary $B...
			std::wstring ws;
			for (wchar_t *p = s + 2; *p; p++) {
				if (*p == L'0' || *p == L'1') ws += *p;
				else if (*p == L'_'); // Ignore underscore.
				else goto named_constant;
			}
			try {
				std::wstring res(1, (wchar_t)std::stoi(ws, nullptr, 2));
				return res;
			} catch (...) {
				//TODO: out of range
			}
		}
		case L'O': case L'o': { // Octal $O...
			std::wstring ws;
			for (wchar_t *p = s + 2; *p; p++) {
				if (*p >= L'0' && *p <= L'7') ws += *p;
				else if (*p == L'_'); // Ignore underscore.
				else goto named_constant;
			}
			try {
				std::wstring res(1, (wchar_t)std::stoi(ws, nullptr, 8));
				return res;
			} catch (...) {
				//TODO: out of range
			}
		}
		case L'U': case L'u': case L'X': case L'x': { // Hexadecimal $U... or $X...
			std::wstring ws;
			for (wchar_t *p = s + 2; *p; p++) {
				if (*p >= L'0' && *p <= L'9' || *p >= L'A' && *p <= L'F' || *p >= L'a' && *p <= L'f') ws += *p;
				else if (*p == L'_'); // Ignore underscore.
				else goto named_constant;
			}
			try {
				std::wstring res(1, (wchar_t)std::stoi(ws, nullptr, 16));
				return res;
			} catch (...) {
				//TODO: out of range
			}
		}
		default:
		if (s[1] >= L'0' && s[1] <= L'9') {
			std::wstring ws;
			for (wchar_t *p = s + 1; *p; p++) {
				if (*p >= L'0' && *p <= L'9') ws += *p;
				else if (*p == L'_'); // Ignore underscore.
				else goto named_constant;
			}
			try {
				std::wstring res(1, (wchar_t)std::stoi(ws, nullptr, 10));
				return res;
			} catch (...) {
				//TODO: out of range
			}
		}
		named_constant:
			return NamedString(s);
		}
	}
	return std::wstring(L"ERR"); // TEMP
}

enum datetime_fmt {
	INVALID_FMT,
	DATE, DATE_DMY, DATE_MDY, DATE_YMD,
	TIME, TIME_12HM, TIME_12HMS, TIME_24HM, TIME_24HMS
};

std::wstring NamedString(wchar_t *s) {
	assert(s != nullptr);
	assert(s[0] == L'$' && s[1] != L'\0');

	s++; // Skip '$'.

	switch (s[0]) {
	case L'C': case L'c':
		if (!_wcsicmp(L"CR", s))
			return std::wstring(L"\r");
		break;
	case L'D': case L'd':
		if (!_wcsnicmp(L"DATE", s, 4)) {
			s += 4;
			if (s[0] != L'\0' && s[0] != L'_') goto bad_name;

			//TODO: $DATE $DATE_DMY $DATE_MDY $DATE_YMD
		}
		break;
	case L'E': case L'e':
		if (s[1] == L'\0' || !_wcsicmp(L"ESC", s) || !_wcsicmp(L"ESCAPE", s))
			return std::wstring(L"\033");
		break;
	case L'F': case L'f':
		if (!_wcsicmp(L"FF", s) || !_wcsicmp(L"FORMFEED", s))
			return std::wstring(L"\f");
		else if (!_wcsicmp(L"FILE", s)) {
			//FIXME: does not work for libraries
			wchar_t *ws = coco_string_create(args.file);
			std::wstring res(ws);
			delete ws;
			return res;
		}
		break;
	case L'L': case L'l':
		if (!_wcsicmp(L"LF", s) || !_wcsicmp(L"LINEFEED", s))
			return std::wstring(L"\013");
		else if (!_wcsicmp(L"LINE", s))
			return std::to_wstring(t->line);
		break;
	case L'N': case L'n':
		if (s[1] == L'\0' || !_wcsicmp(L"NL", s) || !_wcsicmp(L"NEWLINE", s))
			#if defined(_WIN32)
			return std::wstring(L"\r\n");
			#else
			return std::wstring(L"\015");
			#endif
		break;
	case L'P': case L'p':
		if (!_wcsicmp(L"PD", s) || !_wcsicmp(L"PARENTDIR", s))
			return std::wstring(L"..");
		else if (!_wcsicmp(L"PS", s) || !_wcsicmp(L"PATHSEP", s))
			return std::wstring(S_PATH_SEP);
		break;
	case L'R': case L'r':
		if (s[1] == L'\0' || !_wcsicmp(L"RETURN", s))
			return std::wstring(L"\r");
		//TODO: RD/ROOTDIR
		break;
	case L'S': case L's':
		if (s[1] == L'\0' || !_wcsicmp(L"SPC", s) || !_wcsicmp(L"SPACE", s))
			return std::wstring(L" ");
		break;
	case L'T': case L't':
		if (s[1] == L'\0' || !_wcsicmp(L"TAB", s))
			return std::wstring(L"\t");
		else if (!_wcsnicmp(L"TIME", s, 4)) {
			s += 4;
			if (s[0] != L'\0' && s[0] != L'_') goto bad_name;

			time_t now;
			time(&now);
			auto utc = gmtime(&now);

			std::wstring secs;

			if (s[0] == L'\0') { // $TIME
				//TODO
			} else if (!_wcsicmp(L"_12HM", s)) { // $TIME_12HM
				secs += (utc->tm_hour < 12) ? L" AM": L" PM";
				if (utc->tm_hour > 12) utc->tm_hour -= 12;
				else if (utc->tm_hour == 0) utc->tm_hour = 12;
			} else if (!_wcsicmp(L"_12HMS", s)) { // $TIME_12HMS
				secs += L':';
				if (utc->tm_sec < 10) secs += L'0';
				secs += std::to_wstring(utc->tm_sec);
				secs += (utc->tm_hour < 12) ? L" AM": L" PM";
				if (utc->tm_hour > 12) utc->tm_hour -= 12;
				else if (utc->tm_hour == 0) utc->tm_hour = 12;
			} else if (!_wcsicmp(L"_24HM", s)) { // $TIME_24HM
				// Nothing to do.
			} else if (!_wcsicmp(L"_24HMS", s)) { // $TIME_24HMS
				secs += L':';
				if (utc->tm_sec < 10) secs += L'0';
				secs += std::to_wstring(utc->tm_sec);
			} else goto bad_name;

			wchar_t ws[16];
			swprintf_s(ws, 15, L"%02d:%02d%ls", utc->tm_hour, utc->tm_min, secs.c_str());
			std::wstring res(ws);
			return res;
		}
	}
	bad_name:
	return std::wstring(L"ERR"); //TEMP
}

void Err(const wchar_t *msg) {
	errors->Error(t->line, t->col, msg);
}

void Err(int line, int col, const wchar_t *msg) {
	errors->Error(line, col, msg);
}

void Warn(const wchar_t *msg) {
	// TODO: warning levels.
	if (option.warning_error) Err(msg);
	else errors->Warning(msg);
}

void Warn(int line, int col, const wchar_t *msg) {
	// TODO: warning levels.
	if (option.warning_error) Err(line, col, msg);
	else errors->Warning(line, col, msg);
}

const wchar_t * Exit_block_without_block(int kind) {
	switch (kind) {
	case _Constructor:
		return L"EXIT CONSTRUCTOR without CONSTRUCTOR";
	case _Do:
		return L"EXIT DO without DO";
	case _For:
		return L"EXIT FOR without FOR";
	case _Function:
		return L"EXIT FUNCTION without FUNCTION";
	case _Method:
		return L"EXIT METHOD without METHOD";
	case _Property:
		return L"EXIT PROPERTY without PROPERTY";
	case _Sub:
		return L"EXIT SUB without SUB";
	case _While:
		return L"EXIT WHILE without WHILE";
	default:
		return L"EXIT block without block";
	}
}

void ParseInlineComment() {
	// Parse out "expect-error {{msg}}" or "expect-warning {{msg}}".
	wchar_t *p = la->val;

		// Move past "'" or "//", and whitespace.
	while (*p == L'/' || *p == L'\'' || *p == 32 || *p == 9 || *p == 160) p++;

	// Find "expect-".
	if (wcsncmp(p, L"expect-", 7)) return;
	p += 7;

	// Find "error" or "warning".
	bool bError = true;
	if (wcsncmp(p, L"error", 5) == 0) {
		p += 5;
	} else if (wcsncmp(p, L"warning", 7) == 0) {
		p += 7; bError = false;
	} else return;

	// Whitespace again.
	while (*p == 32 || *p == 9 || *p == 160) p++;

	// Find "{{".
	if (p[0] != L'{' && p[1] != L'{') return; // FIXME: Should this be an error?
	p += 2;

	// Find "}}".
	wchar_t *pRight = wcsstr(p, L"}}");
	if (pRight == nullptr) return; // FIXME: Should this be an error?

	if (bError) {
		Warn(L"Expecting an error"); // TEMP
	} else {
		Warn(L"Expecting a warning"); // TEMP
	}
}

const wchar_t *SIGILS = L"%!$@";

// Resolvers

bool IsAssignmentOp() {
	switch (la->kind) {
	case _concatenation: case _plus: case _minus: case _asterisk: case _slash:
	case _Div: case _Mod: case _Rem: case _SHL: case _SHR: case _And: case _Or: case _Xor:
		if (scanner->Peek()->kind != _equals) return false;
	case _equals: case _colon_equals:
		return true;
	}
	return false;
}

///bool IsCall() {
///	// Disambiguate "("[args]")" from "("["Is"]("<"|"<="|">"|">="|"<>"|"=")")".
///	if (la->kind == _left_paren) {
///		int first = scanner->Peek()->kind;
///		if (first == _Is || (first >= _less_than && first <= _equals)) return false;
///		return true;
///	}
///	return false;
///}

bool IsDeclareParameterList() {
	if (la->kind == _left_paren) {
		int k = scanner->Peek()->kind;
		if (k == _line_break) k = scanner->Peek()->kind;
		if (k == _Optional) k = scanner->Peek()->kind;
		return (k == _integer_literal);
	}
	return false;
}

bool IsFixedPointArgument() {
	return (la->kind == _left_paren && scanner->Peek()->kind == _integer_literal);
}

bool IsIdentifier(int kind) {
	return (kind == _identifier || kind == _typed_identifier || kind == _nullable_identifier);
}

bool IsNamedArgument() {
	if (!IsIdentifier(la->kind)) return false;

	int next = scanner->Peek()->kind;

	if (_equals == next) {
		// TODO: Set a flag on the AST and subsequently do more tests than is possible here.
		Warn(t->line, t->col, 
		    L"The argument does an unusual test for equality (=). Possibly you want a named argument (:=).");
		return false;
	}

	return (_colon_equals == next);
}

///bool IsNewStatement() {
///	if (la->kind == _New) return true;
///	if (la->kind == _identifier) { // FIXME: could be qualified name
///		int next = scanner->Peek()->kind;
///		return (next == _nullable_identifier || next == _left_bracket); // FIXME: nullable not necessary
///	}
///	return false;
///}

bool IsPropertySelf() {
	// "Self", "Self%", "Self!", "Self$", or "Self@".
	if (la->kind == _Self) return true;
	if (la->kind == _typed_identifier && _wcsnicmp(L"self", la->val, 4) == 0 && wcschr(SIGILS, la->val[4])) {
		return true;
	}
	return false;
}

bool IsPropertyWithParam() {
	return (IsIdentifier(la->kind) && scanner->Peek()->kind == _left_paren && IsIdentifier(scanner->Peek()->kind));
	// FIXME: Possible param modifier?
}

bool IsUnit() {
	if (la->kind == _identifier) return true;
	if (la->kind == _left_paren && scanner->Peek()->kind == _identifier) return true;
	return false;
}

bool IsUnorderedInit() {
	int k = la->kind;
	return ((k == _char_literal || k == _integer_constant || k == _integer_literal) && scanner->Peek()->kind == _colon_equals);
}

bool HasWhitespace() {
	// Is true if there is something between current and next tokens.
	return la->charPos > t->charPos + coco_string_length(t->val);
}

///void ExpectEndNew(const wchar_t *tn) {
///	if (la->kind == _End) {
///		Get();
///		if (tn == NULL && la->kind != _New) {
///			Err(L"End New expected");
///			return;
///		}
///		else if (tn != NULL && wcscmp(tn, la->val) != 0) {
///			Err(L"End %ls expected"); // FIXME: show ident
///			return;
///		}
///	}
///	Get();
///}

IGNORECASE

CHARACTERS

// Single characters

n = '\n'.
r = '\r'.
t = '\t'.

// Character sets

ctrl = '\u0000' .. '\u001f'.
ws = ctrl + '\u0020' + '\u00a0'.
eol = n + r.
notEOL = ANY - ctrl - eol.

alpha = 'A' .. 'Z' + '\u00b5' /*Greek micro*/ + '\u03bc' /*Greek mu*/.
alnum = alpha + '0' .. '9'.
alNotX = alpha - 'X'.
alNotHex = alpha - "ABCDEF".
sigil = "!$%@".

bin = "01".
dec = '0' .. '9'.
hex = '0' .. '9' + 'A' .. 'F'.
oct = '0' .. '7'.

nonbin = alnum - bin.
nonhex = alnum - hex.
nonoct = alnum - oct.

currency = ANY - alnum - "_" - ws.

str = ANY - ctrl - eol - '"'.
char = ANY - ctrl - eol.

TOKENS

line_break  = eol{eol}.

at_sign     = "@".
comma       = ",".
dot         = ".".
exclamation = "!".
question    =  "?".
semicolon   = ";".

// Primary
left_paren    = "(".
right_paren   = ")".
left_bracket  = "[".
right_bracket = "]".
left_brace    = "{".
right_brace   = "}".
backslash     = "\\".

// Unary
plus  = "+".
minus = "-".

// Arithmetic
caret    = "^".
asterisk = "*".
slash    = "/".

// Concatenation
concatenation = "&".

// Null coalescing
null_coalescing = "|?".

// Comparison
tilde            = "~".
less_than        = "<".
less_or_equal    = "<=".
greater_than     = ">".
greater_or_equal = ">=".
not_equal        = "<>".
equals           = "=".

// Assignment
colon_equals = ":=".

// Literals

char_literal =
	'`'char'`'.

malformed_char_literal =
	'`'[char].

date_literal =
	dec{dec}
	( "/"dec{dec}"/"dec{dec}  // yyyy/mm/dd
	| "-"dec{dec}"-"dec{dec}  // yyyy-mm-dd
	).

//TODO: malformed_date_literal

fixed_literal = ( '\u00a4' /*currency sign*/ | "@" currency ).

integer_constant =
	( "%"alNotX alpha{["_"]alnum}
	| "%X"alNotHex{["_"]alnum}
	).

integer_literal =
	( "%B"["_"]bin{["_"]bin}
	| "%O"["_"]oct{["_"]oct}
	| "%X"["_"]hex{["_"]hex}
	| dec{['_']dec}
	// Prevent misparsing units (eg "312electronvolts") as real_literal.
	| dec{['_']dec} CONTEXT ("E"alpha)
	).

malformed_integer_literal =
	( "%"
	| "%B"[(bin|"_"){bin|"_"}(nonbin|"_"){nonbin|"_"}]
	| "%O"[(oct|"_"){oct|"_"}(nonoct|"_"){nonoct|"_"}]
	| "%X"[(hex|"_"){hex|"_"}"_"]
	| dec{dec|"_"}"_"
	).

null_literal =
	'|'{'-'}.

real_literal =
	( [dec{['_']dec}]'.'dec{['_']dec}['E'['+'|'-']dec{dec}]['!']
	| dec{['_']dec}'E'['+'|'-']dec{dec}['!']
	| dec{['_']dec}'!'
	).

malformed_real_literal =
	( dec{dec|'_'}"__"{dec|'_'}'.'{'.'}{dec|'_'}['E'['+'|'-']{dec}]['!']
	| {dec|'_'}'.'{'.'}dec{dec|'_'}"__"{dec|'_'}['E'['+'|'-']{dec}]['!']
	| dec{dec|'_'}"__"{dec|'_'}'!'
	).

string_constant =
	'$'alnum{['_']alnum}.

string_literal =
	['_']          // continuation
	'"'{str}'"'    // usual string
	{'"'{str}'"'}  // double quotes
	.

malformed_string_literal =
	["_"]'"'{str}{'"''"'{str}}.

time_literal =
	dec{dec}":"dec{dec}[":"dec{dec}["."dec{dec}]].

//TODO: malformed_time_literal

version_literal =
	dec{dec}"."dec{dec}"."dec{dec}["."dec{dec}].

//TODO: malformed_version_literal

// Identifiers

identifier =
	( alpha{["_"]alnum}
	// Use keywords, eg `Class`
	| "`"alpha alnum{alnum}"`"
	// Prevent misparsing "@modif@modif" & "obj!name" as typed_identifier.
	| alpha{["_"]alnum} CONTEXT (("!"|"@")alpha)
	).

nullable_identifier =
	( "#"alnum{["_"]alnum}
	// Prevent misparsing "#obj!name" as typed_identifier.
	| "#"alnum{["_"]alnum} CONTEXT ("!"alpha)
	).

typed_identifier =
	(alpha|"#"){["_"]alnum}sigil.

// Keywords

And         = "And".
As          = "As".
Base        = "Base".
Begin       = "Begin".
Boolean     = "Boolean".
ByRef       = "ByRef".
Call        = "Call".
Case        = "Case".
Catch       = "Catch".
Char        = "Char".
Class       = "Class".
Const       = "Const".
Constructor = "Constructor".
DateTime        = "DateTime".
Declare     = "Declare".
Destructor  = "Destructor".
Dim         = "Dim".
Div         = "Div".
Do          = "Do".
Does        = "Does".
Each        = "Each".
Else        = "Else".
End         = "End".
Enum        = "Enum".
Event       = "Event".
Exit        = "Exit".
Finally     = "Finally".
Fixed64     = "Fixed64".
Fixed128    = "Fixed128".
For         = "For".
Function    = "Function".
Get         = "Get".
GoTo        = "GoTo".
Handles     = "Handles".
If          = "If".
In          = "In".
Int8        = "Int8".
Int16       = "Int16".
Int32       = "Int32".
Int64       = "Int64".
Int128      = "Int128".
Is          = "Is".
Let         = "Let".
Library     = "Library".
Loop        = "Loop".
Method      = "Method".
Mod         = "Mod".
///Namespace   = "Namespace".
New         = "New".
Not         = "Not".
Object      = "Object".
Optional    = "Optional".
Or          = "Or".
Out         = "Out".
Program     = "Program".
Property    = "Property".
Raise       = "Raise".
Real32      = "Real32".
Real64      = "Real64".
Real128     = "Real128".
ReDim       = "ReDim".
Rem         = "Rem".
Require     = "Require".
Return      = "Return".
SafeString  = "SafeString".
SBits       = "SBits".
Select      = "Select".
Self        = "Self".
Set         = "Set".
SHL         = "SHL".
SHR         = "SHR".
Step        = "Step".
String      = "String".
Struct      = "Struct".
Sub         = "Sub".
Then        = "Then".
To          = "To".
Tol         = "Tol".
Trait       = "Trait".
Try         = "Try".
UBits       = "UBits".
UInt8       = "UInt8".
UInt16      = "UInt16".
UInt32      = "UInt32".
UInt64      = "UInt64".
UInt128     = "UInt128".
Unit        = "Unit".
Until       = "Until".
Var         = "Var".
When        = "When".
Where       = "Where".
While       = "While".
Xor         = "Xor".
Yield       = "Yield".

PRAGMAS

bad_identifier = '\u00ce'. (.
	Get(); SemErr(L"Invalid name caused by incorrect file encoding. Write the file again as \"UTF-8 with BOM\"."); .)

LineContinuation = "_". (.
	int next = scanner->Peek()->kind;
	if (next != _line_break && next != _InlineComment)
	    Err(la->line, la->col, L"Newline or inline comment must follow line continuation"); .)

// Directives

atOption = "@Option". (. option.Parse(); .) //{notEOL}. //TODO
atError  = "@Error"{notEOL}. //TODO
atWarn   = "@Warn"{notEOL}. //TODO

// Comments

InlineComment = ("'"|"//"){notEOL}. (.
	if (option.test) ParseInlineComment(); .)

MidlineComment = "/'"{"#"|alnum|"_"|"."|"-"|"/"|":"|sigil}"'/".

IGNORE t + '\u00a0' // non-breaking space

PRODUCTIONS

ViviFire (. ID(L"ViviFire", STMT) .)
=
	Module

	// Catch errors in block statements.
	[ "Begin"        (. SemErr(L"BEGIN without NEW or loop"); .)
	| "Case"         (. SemErr(L"CASE without SELECT"); .)
	| "Catch"        (. SemErr(L"CATCH without TRY"); .)
	| "Constructor"  (. SemErr(L"CONSTRUCTOR without CLASS"); .)
	| "Destructor"   (. SemErr(L"DESTRUCTOR without CLASS"); .)
	| "Get"          (. SemErr(L"GET without PROPERTY"); .)
	| "Else"         (. SemErr(L"ELSE without IF"); .)
	| "End"          (. SemErr(L"END without start"); .)
	| "Finally"      (. SemErr(L"FINALLY without TRY"); .)
	| "Loop"         (. SemErr(L"LOOP without DO"); .)
	| "Rem"          (. SemErr(L"REM is not a comment. Try ' or //"); .)
	| "Require"      (. SemErr(L"REQUIRE must come before statements"); .)
	| "Set"          (. SemErr(L"SET without PROPERTY"); .)
	| "Then"         (. SemErr(L"THEN without IF"); .)
	| "Until"        (. SemErr(L"UNTIL without DO or LOOP"); .)
	| "When"         (. SemErr(L"WHEN without BEGIN"); .)
	| "Where"        (. SemErr(L"WHERE is not permitted here"); .)
	| ConstantValueError
	]

	EOF

	(. wprintf(L"\n-- %d %ls\n", errors->count, (errors->count == 1) ? L"error" : L"errors"); .)
.

/*A*/
AdditiveExpression (. ID(L"Additive", EXPR) .)
=
	MultiplicativeExpression { ( '+' | '-' ) MultiplicativeExpression }
.
Argument (. ID(L"Argument", STMT) .)
=
	(
		null_literal
	|
		[ IF (IsNamedArgument())
			Name ":="
		]
		( EnclosedExpression | LambdaExpression )
	)
.
ArgumentList (. ID(L"ArgumentList", STMT) .)
=
	// Disambiguate "("args")" from "("expr")".
	( IF (la->kind == _left_paren) EnclosedArgumentList
	| UnenclosedArgumentList
	)
.
ArrayDimensionList (. ID(L"ArrayDimensionList", STMT) .)
=
	'('
	[ Rank                             // Eg 'Dim matrix(*2)'
	| Expression { comma Expression }  // Eg 'Dim matrix(3, 3)'
	]
	')'
.
AssignmentOperator (. ID(L"AssignmentOperator", STMT) .)
=
	[
		( concatenation | "+" | "-" | "*" | "/" | "Div" | "Mod" | "Rem" | "SHL" | "SHR" | "And" | "Or" | "Xor" )
		(. if (HasWhitespace()) Err(L"Bad assignment operator"); .)
	]
	"="
.
AssignmentStatement (. ID(L"AssignmentStatement", STMT) .)
=
	(
		AssignmentOperator [OptionalNewline]
		Expression
	|
		":=" Expression
		{ ":=" Expression }
	)
.
AsTypeClause<bool bBits> (. ID(L"AsTypeClause", STMT) .)
=
	"As"
	( UserType [ EnclosedArgumentList ]
	| PrimitiveType<bBits>
	)
	[ Rank ]
.
/*B*/
BaseUnitStatement<class Modif &mods> (. ID(L"BaseUnitStatement", STMT) .)
=
	(.
	mods.allow(Modif::Deprecated);
	mods.validate();
	.)
	"Base"
	( "Unit" identifier InUnitClause
		[ "=" MultiplicativeExpression ]
		SyncNewline<s_name>
	| ANY (. SemErr(L"Object BASE is available only in a child class"); .)
	)
.
BitFieldType<int &tkn> (. ID(L"BitFieldType", STMT) .)
=
	(. tkn = la->kind; .)
	( "SBits" | "UBits" )
	[ "[" PassableType "]" ]
	"(" integer_literal ")"
.
BitShiftExpression (. ID(L"BitShift", EXPR) .)
=
	UnaryExpression { ( "SHL" | "SHR" ) UnaryExpression }
.
Block<int &tkn> (. ID(L"Block", STMT) .)
=
	(. tkn = la->kind; .)
	( "Constructor" | "Do" | "For" | "Function" | "Method" | "Property" | "Sub" | "While" )
.
BlockStatement<Modif &mods> (. ID(L"BlockStatement", STMT) .)
=
	(. if (mods.count() > 0 && la->kind != _Select) mods.validate(); .)
	// Must change the line above if more statements get mods.
	(
		SelectStatement<mods>
	|
		EventStatement
	|
		DoStatement
	|
		ForStatement
	|
		IfStatement
	|
		TryStatement
	|
		WhileStatement
	)
.
/*C*/
CallOrNew<int which, Modif *mods> (. ID(L"CallOrNew", STMT) .)
=
	(.
	bool bShared = mods ? mods->allow(Modif::Shared) : false;
	if (mods) mods->validate();
	.)
	UnenclosedArgumentList
	[ IF (la->kind == _line_break && scanner->Peek()->kind == _Begin) // FIXME: multiple line breaks?
		SyncNewline<s_name>
		NewBlockStatement
	]
.
CallStatement (. ID(L"CallStatement", STMT) .)
=
	"Call"
	( QualifiedName<0>
	|
		"Base"
		(.
		if (std::find(context.rbegin(), context.rend(), _Constructor) == context.rend())
		    SemErr(L"CALL BASE is available only in a CONSTRUCTOR");
		.)
	|
		"Constructor"
		(.
		if (std::find(context.rbegin(), context.rend(), _Constructor) == context.rend())
		    SemErr(L"CALL CONSTRUCTOR is available only in a CONSTRUCTOR");
		.)
	)
	[ ArgumentList ]
.
CaseClause<case_type &clause> (. ID(L"CaseClause", STMT) .)
=
	"Case"
		(. if (clause == CASE_ELSE) SemErr(L"CASE cannot follow CASE ELSE in SELECT"); .)
	(
		"Else"
		(. if (clause == CASE_ZERO) SemErr(L"CASE ELSE cannot be first CASE in SELECT"); .)
		(. clause = CASE_ELSE; .)
	|
		CaseExpression
		{
			WEAK comma [ OptionalNewline ]
			CaseExpression
		}
		(. clause = CASE_EXPR; .)
	)
	SyncNewline<s_name>
	{ Statement }
.
CaseExpression (. ID(L"CaseExpression", STMT) .)
=
	( "Is" ComparisonOperator Expression
	| Expression [ "To" Expression ]
	)
.
CatchClause (. ID(L"CatchClause", STMT) .)
=
	"Catch" [ Name [ AsTypeClause<NO_BITS> ] ] SyncNewline<s_name>
	(. context.push_back(_Catch); .)
	{ Statement }
	(. context.pop_back(); .)
.
ClassOrObjectMember<int kind> (. ID(L"ClassOrObjectMember", STMT) .)
=
	(. Modif mods(this); .)
	[ ModifiersClause<mods> ]
	(
		 (. if (kind == _Object) Err(la->line, la->col, L"OBJECT cannot have CONSTRUCTOR"); .)
		ConstructorStatement<mods>
	|
		(. if (kind == _Object) Err(la->line, la->col, L"OBJECT cannot have DESTRUCTOR"); .)
		DestructorStatement<mods>
	| ConstStatement<mods>
	| DeclareStatement<mods>
	| DimStatement<mods>
	| EnumStatement<mods>
	| EventStatement
	| FunctionStatement<mods>
	| MethodStatement<mods>
	| NewStatement<&mods>
	| PropertyStatement<mods>
	| StructStatement<mods>
	| SubStatement<mods>
	)
.
ClassStatement<Modif &mods> (. ID(L"ClassStatement", STMT) .)
=
	(.
	bool bAbstract = mods.allow(Modif::Abstract);
	mods.allow(Modif::Deprecated);
	bool bOpen     = mods.allow(Modif::Open);
	mods.validate();

	int line, col;
	bool generic = false;
	.)
	"Class" (. line = t->line; col = t->col; .)
	identifier
	[ TypeParameterList<_Class> (. generic = true; .) ]
	[ "Is" UserType ]
	{ DoesClause }
	[ WhereClause<_Class, generic> ]
	SyncNewline<s_name>
	{ WhereClause<_Class, generic> SyncNewline<s_name> }
	(. context.push_back(_Class); .)
//	{ Statement } // Conflict: assignment vs var decl
	{ ClassOrObjectMember<_Class> }
	(. context.pop_back(); .)
	(. if (la->kind != _End) Err(line, col, L"CLASS without END"); .)
	"End"
	(. Optional(_Class); .)
	Newline
.
CollectionInitializer (. ID(L"CollectionInitializer", STMT) .)
=
	"{" [ OptionalNewline ]
	InitializationElement
	{
		WEAK comma [ OptionalNewline ]
		InitializationElement
	}
	"}"
	// Permit isolated right brace.
	[ IF (la->kind == _line_break && scanner->Peek()->kind == _right_brace)
		line_break
	]
.
ComparisonExpression (. ID(L"Comparison", EXPR) .)
=
	NullCoalescingExpression { ComparisonOperator NullCoalescingExpression }
.
ComparisonOperator (. ID(L"ComparisonOperator", STMT) .)
=
	[ "~" ]
	( "=" | "<>" | "<" | "<=" | ">" | ">=" )
.
ConcatenationExpression (. ID(L"Concatenation", EXPR) .)
=
	AdditiveExpression
	{
		concatenation AdditiveExpression
	}
.
///ConditionalComparison (. ID(ConditionalComparison) .)
///=
///	ComparisonOperator "Is" NullCoalescingExpression
///.
ConditionalExpression
=
	"If" EnclosedExpression
	"Then" EnclosedExpression
	"Else" EnclosedExpression
.
ConstantDeclarator (. ID(L"ConstantDeclarator", STMT) .)
=
	Name [ TypeClause<NO_BITS> ] "=" Expression
.
ConstantValueError (. ID(L"ConstantValueError", STMT) .)
=
	( char_literal | date_literal | fixed_literal | integer_constant | integer_literal | null_literal
	| real_literal | string_constant | string_literal | time_literal | version_literal
	)
	(. SemErr(L"Cannot use a constant value here"); .)
.
ConstIfStatement<Modif &mods, int line, int col> (. ID(L"ConstIfStatement", STMT) .)
=
	(. mods.validate(); .)
	(. option_type nThen = WITHOUT_THEN; .)
	"If" TolExpression
	[ "Then" (. nThen = WITH_THEN; .) ]
	IfBlockStatement<line, col, nThen>
.
ConstStatement<Modif &mods> (. ID(L"ConstStatement", STMT) .)
=
	(. int line = la->line, col = la->col; .)
	"Const"
	(
		(.
		mods.allow(Modif::Deprecated);
		mods.validate();
		.)
		ConstantDeclarator { WEAK comma ConstantDeclarator }
	|
		ConstIfStatement<mods, line, col>
	)
	SyncNewline<s_name>
.
Constraint<int block> (. ID(L"Constraint", STMT) .)
=
	(
		(. int c = 0; .)

		identifier
		[ (. c++; .)
			( "<" | "<=" ) identifier [ ( "<" | "<=" ) identifier ]
		]
		[ (. c++; .)
			"Is" ( "Class" | "Struct" | "Unit" )
		]
		{ (. c++; .)
			"Does" UserType
		}
		[ (. c++; .)
			"Constructor" ( "(" ")" | "?" )
		]
		(. if (c == 0) SemErr(L"invalid Constraint"); .)
	|
		"Self"
		(. if (block != _Class && block != _Trait) SemErr(L"SELF constraint only available in CLASS and TRAIT"); .)
		( "<" | "<=" | "Is" )
		UserType
	)
.
ConstructorStatement<Modif &mods> (. ID(L"ConstructorStatement", STMT) .)
=
	(.
	mods.allow(Modif::Deprecated);
	mods.validate();

	int line, col;
	bool var_construct = false;
	.)
	"Constructor" (. line = t->line; col = t->col; .)
	[
		DimOrVar
		(. var_construct = true; .)
	]
	[
		(. if (var_construct) Err(la->line, la->col, L"CONSTRUCTOR VAR cannot have a parameter list"); .)
		FormalParameterList<_Constructor>
	]
	SyncNewline<s_name>
	(. context.push_back(_Constructor); .)
	(. if (var_construct) context.push_back(_Var); .)
	{ Statement }
	(. if (var_construct) context.pop_back(); .)
	(. context.pop_back(); .)
	(. if (la->kind != _End) Err(line, col, L"CONSTRUCTOR without END"); .)
	"End"
	(. Optional(_Constructor); .)
	Newline
.
ConvertibleType (. ID(L"ConvertibleType", STMT) .)
=
	( PrimitiveType<NO_BITS> | UserType )
.
/*D*/
DateTimeExpression (. ID(L"DateTime", EXPR) .)
=
	( date_literal [ time_literal ]
	| time_literal
	)
.
DeclarationStatement<Modif &mods> (. ID(L"DeclarationStatement", STMT) .)
=
	( ConstStatement<mods>
	| DeclareStatement<mods>
	| DimStatement<mods>
	| NewStatement<&mods>
	)
.
Declarator<bool bBits> (. ID(L"Declarator", STMT) .)
=
	Name
	[ ArrayDimensionList ]
	[ TypeClause<bBits> ]
	[ '=' InitializationExpression ]
.
DeclaratorList<bool bBits> (. ID(L"DeclaratorList", STMT) .)
=
	Declarator<bBits>
	{
		WEAK comma [ OptionalNewline ]
		Declarator<bBits>
	}
.
DeclareParameter<bool &isOptional> (. ID(L"DeclareParameter", STMT) .)
=
	[ "Optional" (. isOptional = true; .) ]
	integer_literal
	[ "=" EnclosedExpression ]
.
DeclareParameterList (. ID(L"DeclareParameterList", STMT) .)
=
	(. bool isOptional; .)
	( IF (IsDeclareParameterList())
		"(" [ OptionalNewline ]
		[
			DeclareParameter<isOptional>
			{
				WEAK comma [ OptionalNewline ]
				DeclareParameter<isOptional>
			}
		]
		")"
	|
		EnclosedParameterList<_Declare>
		[ TypeClause<NO_BITS> ]
	)
.
DeclareSignature<bool isAlias> (. ID(L"DeclareSignature", STMT) .)
=
	( "Function" | "Sub" )
	Name
	[ "Is" ( string_literal | QualifiedName<0> ) ]
	[ DeclareParameterList ]
.
DeclareStatement<Modif &mods> (. ID(L"DeclareStatement", STMT) .)
=
	(.
	mods.allow(Modif::Deprecated);
	mods.validate();

	int line, col;
	bool bAnsi = false, bCdecl = false, bUtf16 = false;
	.)
	(. bool isAlias = true; .)
	"Declare" (. line = t->line; col = t->col; .)
	[
		(
			string_literal
		|
			identifier
			(. SemErr(L"external library must be a string constant"); .)
		)
		{
			[ comma ]
			identifier
			(.
			if (Matches(L"ANSI")) {
				if (bUtf16) SemErr(L"ANSI is not compatible with UTF16");
				if (!bAnsi) bAnsi = true;
				else Warn(t->line, t->col, L"ANSI given more than one time");
			} else if (Matches(L"CDECL")) {
				if (!bCdecl) bCdecl = true;
				else Warn(t->line, t->col, L"CDECL given more than one time");
			} else if (Matches(L"UTF16")) {
				if (bAnsi) SemErr(L"UTF16 is not compatible with ANSI");
				if (!bUtf16) bUtf16 = true;
				else Warn(t->line, t->col, L"UTF16 given more than one time");
			} else SemErr(L"invalid DECLARE flag. ANSI, CDECL, and UTF16 are permitted.");
			.)
		}
		(. isAlias = false; .)
	]
	( DeclareSignature<isAlias>
	| SyncNewline<s_name>
		{ DeclareSignature<isAlias> Newline }
	(. if (la->kind != _End) Err(line, col, L"DECLARE without END"); .)
		"End"
		(. Optional(_Declare); .)
	)
	SyncNewline<s_name>
.
Deprecated (. ID(L"Deprecated", STMT) .)
=
	"@" (. if ( !Match(L"Deprecated") ) SemErr(L"@DEPRECATED expected"); .)
	[ string_literal ]
	[ OptionalNewline ]
.
DestructorStatement<Modif &mods> (. ID(L"DestructorStatement", STMT) .)
=
	(.
	mods.validate();

	int line, col;
	.)
	"Destructor" (. line = t->line; col = t->col; .)
	Newline
	{ Statement }
	(. if (la->kind != _End) Err(line, col, L"DESTRUCTOR without END"); .)
	"End"
	(. Optional(_Destructor); .)
	Newline
.
DimOrVar (. ID(L"DimOrVar", STMT) .)
=
	( "Dim"  (. if (option.Dim_or_Var == TERNARY2) SemErr(L"Must use VAR because of @OPTION"); .)
	| "Var"  (. if (option.Dim_or_Var == TERNARY1) SemErr(L"Must use DIM because of @OPTION"); .)
	)
.
DimStatement<Modif &mods> (. ID(L"DimStatement", STMT) .)
=
	(.
	// Permit @Deprecated?
	bool bShared = mods.allow(Modif::Shared);
	mods.validate();
	.)
	DimOrVar
	DeclaratorList<NO_BITS>
	SyncNewline<s_name>
.
DivisionFunction (. ID(L"Division", EXPR) .)
=
	(. bool two_args = false; .)
	(
		"Div"
	|
		"Mod" (. two_args = true; .)
	|
		"Rem" (. two_args = true; .)
	)
	"(" EnclosedExpression
	comma EnclosedExpression
	[
		comma
		(. if (two_args) SemErr(L"Too many arguments for MOD or REM"); .)
		EnclosedExpression
	]
	")"
.
DoesClause (. ID(L"DoesClause", STMT) .)
=
	"Does" UserType
.
DoStatement (. ID(L"DoStatement", STMT) .)
=
	(. int line, col; .)
	"Do" (. line = t->line; col = t->col; .)
	(	// Do...Loop While/Until
		Newline
		(. context.push_back(_Do); .)
		[ LoopBody<POSTCONDITIONAL> ]
		(. context.pop_back(); .)
	(. if (la->kind != _Loop) Err(line, col, L"DO without LOOP"); .)
		"Loop" WhileOrUntil TolExpression
		SyncNewline<s_name>
	|	// Do While/Until...Loop
		WhileOrUntil TolExpression
		SyncNewline<s_name>
		(. context.push_back(_Do); .)
		[ LoopBody<PRECONDITIONAL> ]
		(. context.pop_back(); .)
		"Loop"
		[ WhileOrUntil (. SemErr(L"DO WHILE or DO UNTIL cannot have LOOP WHILE or LOOP UNTIL"); .) ]
		Newline
	)
.
/*E*/
EnclosedArgumentList (. ID(L"EnclosedArgumentList", STMT) .)
=
	"(" [ OptionalNewline ]
	[ Argument ]
	{
		WEAK comma
		[
			[ OptionalNewline ]
			Argument
		]
	}
	")"
.
EnclosedExpression (. ID(L"Enclosed", EXPR) .)
=
	LogicalExpression
.
EnclosedParameterList<int parent> (. ID(L"EnclosedParameterList", STMT) .)
=
	(. param_validator param(this, parent); .)
	"(" [ OptionalNewline ]
	(
		FormalParameter<param>
		{
			WEAK comma [ OptionalNewline ]
			FormalParameter<param>
		}
	|
		(. param.none(); .)
	)
	")"
.
EnumMember (. ID(L"EnumMember", STMT) .)
=
	(. bool deprecated = false; .)
	[ Deprecated (. deprecated = true; .) ]
	identifier
	(
		"=" Expression
	|
		(. if (option.Enum_equals) SemErr(L"Enumeration constant must have initializer because of @OPTION"); .)
	)
	SyncSeparator<s_name>
	(. if (deprecated && t->kind == _semicolon && la->kind != _at_sign)
	    Warn(la->line, la->col, L"@DEPRECATED has no effect on this constant. We recommend a line-break here."); .)
.
EnumStatement<Modif &mods> (. ID(L"EnumStatement", STMT) .)
=
	(.
	mods.allow(Modif::Deprecated);
	bool bFlags    = mods.allow(Modif::Flags);
	bool bMustUse  = mods.allow(Modif::MustUse);
	bool bOpen     = mods.allow(Modif::Open);
	bool bStrict   = mods.allow(Modif::Strict);
	bool bUnique   = mods.allow(Modif::Unique);
	mods.validate();

	int line, col;
	.)
	"Enum" (. line = t->line; col = t->col; .)
	(
		identifier
	|
		(. if (bFlags || bOpen || option.Enum_id) {
		    const wchar_t *reason = (bFlags) ? L"@FLAGS" : (bOpen) ? L"@OPEN" : L"@OPTION";
		    wchar_t *msg = coco_string_create_append(L"Enumeration type must have a name because of ", reason);
		    Err(msg);
		    coco_string_delete(msg);
		} .)
	)
	(
		IntegerTypeOrExtension
	|
		(. if (bFlags || option.Enum_Is) {
		    const wchar_t *reason = (bFlags) ? L"@FLAGS" : L"@OPTION";
		    wchar_t *msg = coco_string_create_append(L"Enumeration must have a clause IS because of ", reason);
		    Err(msg);
		    coco_string_delete(msg);
		} .)
	)
	SyncNewline<s_name>
	{
		EnumMember
	}
	// Make sure last EnumMember ends with EOL.
	(. if (t->kind != _line_break) SynErr(_line_break); .)
	(. if (la->kind != _End) Err(line, col, L"ENUM without END"); .)
	"End"
	(. Optional(_Enum); .)
	Newline
.
EventStatement (. ID(L"EventStatement", STMT) .)
=
	(. bool generic = false; .)
	"Event" identifier 
	[ TypeParameterList<_Event> (. generic = true; .) ]
	[ FormalParameterList<_Event> ]
	[ WhereClause<_Event, generic> ]
	SyncNewline<s_name>
.
ExitStatement (. ID(L"ExitStatement", STMT) .)
=
	(. int kind = 0; .)
	"Exit"
	(.
	if (std::find(context.rbegin(), context.rend(), _Finally) != context.rend())
	    SemErr(L"Cannot use EXIT in FINALLY");
	.)
	(
		identifier
		(.
		if (std::find(context.rbegin(), context.rend(), _Begin) == context.rend())
		    SemErr(L"EXIT label without BEGIN...WHEN");
		.)
	|
		Block<kind>
		(.
		auto it = std::find(context.rbegin(), context.rend(), kind);
		if (it == context.rend())
		    SemErr(Exit_block_without_block(kind));

		if (la->kind == _comma && kind != _Do && kind != _For && kind != _While)
		    SemErr(L"EXIT list can use only DO or FOR or WHILE");
		.)
		{
			WEAK comma
			Block<kind>
			(.
			it = std::find(++it, context.rend(), kind);
			if (it == context.rend())
			    SemErr(Exit_block_without_block(kind));

			if (la->kind == _comma && kind != _Do && kind != _For && kind != _While)
			    SemErr(L"EXIT list can use only DO or FOR or WHILE");
			.)
		}
	|
		"Program"
		(.
		if (context[0] != _Program)
		    SemErr(L"Cannot use EXIT PROGRAM in LIBRARY");
		.)
		[ EnclosedExpression ]
	)
.
Expression (. ID(L"Expression", EXPR) .)
=
	(
		EnclosedExpression
	|
		ConditionalExpression
	|
		LambdaExpression
	)
	(.
	if (la->kind == _right_paren) {
		Get();
		SemErr(L"Parentheses do not agree");
	}
	.)
.
/*F*/
FixedPointType<int &tkn> (. ID(L"FixedPointType", STMT) .)
=
	(. tkn = la->kind; .)
	( "Fixed64" | "Fixed128" ) [ IF (IsFixedPointArgument()) "(" integer_literal ")" ]
.
FloatingPointType<int &tkn> (. ID(L"FloatingPointType", STMT) .)
=
	(. tkn = la->kind; .)
	( "Real32" | "Real64" | "Real128" )
.
FormalParameter<param_validator &param> (. ID(L"FormalParameter", STMT) .)
=
	( FormalParameterModifier<param>
	| (. param.add(); .)
	)
	Name
	[ '(' [ Rank ] ')' ]
	[ TypeClause<NO_BITS> ]
	( "=" EnclosedExpression
	| (. if (param.optional() && option.Optional_equals) SemErr(L"Optional parameter must have initializer because of @OPTION"); .)
	)
.
FormalParameterList<int parent> (. ID(L"FormalParameterList", STMT) .)
=
	( EnclosedParameterList<parent> | UnenclosedParameterList<parent> )
.
FormalParameterModifier<param_validator &param> (. ID(L"FormalParameterModifier", STMT) .)
=
	(
		"ByRef"     (. param.add(_ByRef); .)
	|
		"Optional"  (. param.add(_Optional); .)
	)
.
ForStatement (. ID(L"ForStatement", STMT) .)
=
	(. int line, col; .)
	"For" (. line = t->line; col = t->col; .)
	( "Each" LoopControlVariable
		"In" InitializationExpression
	| LoopControlVariable
		"=" Expression
		"To" Expression
		[ "Step" Expression ]
	)
	SyncNewline<s_name>
	(. context.push_back(_For); .)
	[ LoopBody<PRECONDITIONAL> ]
	(. context.pop_back(); .)
	(. if (la->kind != _End) Err(line, col, L"FOR without END"); .)
	"End"
	(. Optional(_For); .)
	Newline
.
FunctionSignature<Modif &mods, int &line, int &col, bool &bodied, bool &generic> (. ID(L"FunctionSignature", STMT) .)
=
	"Function" (. line = t->line; col = t->col; .)
	Name
	(. bool typed_name = (t->kind == _typed_identifier); .)
	(
		[ TypeParameterList<_Function> (. generic = true; .) ]
		[ EnclosedParameterList<_Function> ]
		( ReturnTypeClause
		| (. if (!typed_name) SemErr(L"FUNCTION must have a return type"); .)
		)
		[ WhereClause<_Function, generic> ]
	|
		"Does" QualifiedName<0>
		(. bodied = false; .)
	)
	SyncNewline<s_name>
.
FunctionStatement<Modif &mods> (. ID(L"FunctionStatement", STMT) .)
=
	(.
	mods.allow(Modif::Deprecated);
	bool bIterator = mods.allow(Modif::Iterator);
	bool bShared   = mods.allow(Modif::Shared);
	mods.validate();

	int line, col;
	bool bodied = true;
	bool generic = false;
	.)
	FunctionSignature<mods, line, col, bodied, generic>
	[ IF (bodied)
		{ WhereClause<_Function, generic> SyncNewline<s_name> }
		(.
		if (bIterator) context.push_back(_Yield);
		context.push_back(_Function);
		.)
		{ Statement }
		(.
		context.pop_back();
		if (bIterator) context.pop_back();
		.)
	(. if (la->kind != _End) Err(line, col, L"FUNCTION without END"); .)
	"End"
	(. Optional(_Function); .)
		Newline
	]
.
/*G*/
GotoStatement (. ID(L"GotoStatement", STMT) .)
=
	"Goto"
	(.
	if (std::find(context.rbegin(), context.rend(), _Select) == context.rend())
	    SemErr(L"GOTO CASE without SELECT");

	if (std::find(context.rbegin(), context.rend(), _Finally) != context.rend())
	    SemErr(L"Cannot use GOTO CASE in FINALLY");
	.)
	"Case" ( "Else" | TolExpression )
.
/*H*/
/*I*/
IdentifierStatement (. ID(L"IdentifierStatement", STMT) .)
=
	// Related: SimpleExpression
	( Name [ TypeArgumentList ]
	| "Base"
	| "Self"
	)
	{
		( dot
		| ".?"
		| "?"
		| "??"
		)
		Name [ TypeArgumentList ]
	| EnclosedArgumentList // Also is array subscript.
	}
	[ IF (IsAssignmentOp())
		AssignmentStatement
	|
		CallOrNew<0, nullptr>
	]
.
IfBlockStatement<int line, int col, option_type nThen> (. ID(L"IfBlockStatement", STMT) .)
=
	(. bool bElseSeen = false; .)
	(. Optional(_Then, nThen); .)
	SyncNewline<s_name>
	{ Statement }
	{	"Else" (. if (bElseSeen) SemErr(L"ELSE or ELSE IF cannot follow ELSE"); .)
		( "If" TolExpression (. Optional(_Then); .)
		| (. bElseSeen = true; .)
		)
		SyncNewline<s_name>
		{ Statement }
	}
	(. if (la->kind != _End) Err(line, col, L"IF without END"); .)
	"End"
	(. Optional(_If); .)
.
IfStatement (. ID(L"IfStatement", STMT) .)
=
	(. int line, col; .)
	"If" (. line = t->line; col = t->col; .)
	TolExpression
	(	"Then"
		(
			IfBlockStatement<line, col, WITH_THEN>
		|
			(. if (option.If_End) SemErr(L"IF must use block construct because of @OPTION"); .)
			( SimpleStatement | SimpleStatementError )
			[ "Else" ( SimpleStatement | SimpleStatementError ) ]
		)
	|
		IfBlockStatement<line, col, WITHOUT_THEN>
	)
	Newline
.
InitializationElement (. ID(L"InitializationElement", STMT) .)
=
	[ IF (IsUnorderedInit()) IntegerConstant ":=" ]
	InitializationExpression
.
InitializationExpression (. ID(L"InitializationExpression", STMT) .)
=
	(
		Expression
	|
		CollectionInitializer
	)
.
IntegerConstant (. ID(L"IntegerConstant", STMT) .)
=
	( char_literal | integer_constant | integer_literal )
.
IntegerType<int &tkn> (. ID(L"IntegerType", STMT) .)
=
	(. tkn = la->kind; .)
	( "Int8"  | "Int16"  | "Int32"  | "Int64"  | "Int128"
	| "UInt8" | "UInt16" | "UInt32" | "UInt64" | "UInt128"
	)
.
IntegerTypeOrExtension (. ID(L"IntegerTypeOrExtension", STMT) .)
=
	(. int tkn = 0; .)
	"Is" ( identifier | IntegerType<tkn> )
.
InUnitClause (. ID(L"InUnitClause", STMT) .)
=
	"In" UnitOfMeasure
.
IsExpression (. ID(L"IsExpression", EXPR) .)
=
	"Is" ( SimpleExpression | "Object" )
.
/*J*/
/*K*/
/*L*/
LambdaExpression (. ID(L"Lambda", EXPR) .)
=
	(. int line, col; .)
	(
		"Function" (. line = t->line; col = t->col; .)
		(
			Name // Operator to get address.
		|
			EnclosedParameterList<_Event>
			(
				EnclosedExpression
			|
				LambdaFunction<line, col>
			)
		|
			LambdaFunction<line, col>
		)
	|
		"Sub" (. line = t->line; col = t->col; .)
		(
			Name // Operator to get address.
		|
			EnclosedParameterList<_Event>
			(
				EnclosedExpression
			|
				LambdaSub<line, col>
			)
		|
			LambdaSub<line, col>
		)
	)
.
LambdaFunction<int line, int col> (. ID(L"LambdaFunction", STMT) .)
=
	SyncNewline<s_name>
	{ Statement }
	(. if (la->kind != _End) Err(line, col, L"FUNCTION without END"); .)
	"End"
	(. Optional(_Function); .)
.
LambdaSub<int line, int col> (. ID(L"LambdaSub", STMT) .)
=
	SyncNewline<s_name>
	{ Statement }
	(. if (la->kind != _End) Err(line, col, L"ESUB without END"); .)
	"End"
	(. Optional(_Sub); .)
.
LogicalExpression (. ID(L"Logical", EXPR) .)
=
	ComparisonExpression { LogicalOperator ComparisonExpression }
.
LogicalOperator (. ID(L"LogicalOperator", STMT) .)
=
	( "And" [ "Then" ]
	| "Or" [ "Else" ]
	| "Xor"
	)
.
LoopControlVariable (. ID(L"LoopControlVariable", STMT) .)
=
	( ObjectName [ AsTypeClause<NO_BITS> ]
	| typed_identifier
	)
.
LoopBody<bool isPreconditional> (. ID(L"LoopBody", STMT) .)
=
	(
		Statement { Statement }
	|
		(. when_map whens; .)
		"Begin"
		(. int begin_l = t->line, begin_c = t->col; .)
		[
			identifier
			(.
			std::wstring id(t->val);
			std::transform(id.begin(), id.end(), id.begin(), std::towupper);
			whens[id]++;
			.)
			{ WEAK comma
				identifier
				(.
				std::wstring id(t->val);
				std::transform(id.begin(), id.end(), id.begin(), std::towupper);
				if (++whens[id] == 2) {
					SemErr(L"BEGIN cannot have two of the same label");
					whens[id] = 1;
				}
				.)
			}
		]
		SyncNewline<s_name>
		(. context.push_back(_Begin); .)
		{ Statement }
		(. context.pop_back(); .)
		WhenStatement<isPreconditional, whens>
		{ WhenStatement<isPreconditional, whens> }
		// TODO: if @Option When id Begin id, make sure labels agree with whens.
	)
.
/*M*/
MethodStatement<Modif &mods> (. ID(L"MethodStatement", STMT) .)
=
	(.
	bool bAbstract = mods.allow(Modif::Abstract);
	bool bConst    = mods.allow(Modif::Const);
	mods.allow(Modif::Deprecated);
	bool bIterator = mods.allow(Modif::Iterator);
	bool bMustUse  = mods.allow(Modif::MustUse);
	bool bOpen     = mods.allow(Modif::Open);
	bool bOverride = mods.allow(Modif::Override);
	bool bShared   = mods.allow(Modif::Shared);
	mods.validate();

	int line, col;
	.)
	MethodSignature<mods, line, col>
	(.
	if (bIterator) context.push_back(_Yield);
	context.push_back(_Method);
	.)
	{ Statement }
	(.
	context.pop_back();
	if (bIterator) context.pop_back();
	.)
	(. if (la->kind != _End) Err(line, col, L"METHOD without END"); .)
	"End"
	(. Optional(_Method); .)
	Newline
.
MethodSignature<Modif &mods, int &line, int &col> (. ID(L"MethodSignature", STMT) .)
=
	"Method"
	(.
	line = t->line; col = t->col;
	// If in a program module
	if (context.back() == _Program)
	    SemErr(L"Cannot use METHOD in PROGRAM module");
	.)
	Name
	(. bool bReturns = (t->kind == _typed_identifier); .)
	[
		EnclosedParameterList<_Method>
		[
			ReturnTypeClause
			(. bReturns = true; .)
		]
	|
		UnenclosedParameterList<_Method>
	|
		ReturnTypeClause
		(. bReturns = true; .)
	]
	(.
	if (!bReturns && mods.has(Modif::Const) || mods.has(Modif::MustUse))
		SemErr(L"Method must have return type because of modifier(s)");
	.)
	SyncNewline<s_name>
.
Modifier<int &m, ModifArg &arg> (. ID(L"Modifier", STMT) .)
=
	(. m = Modif::LAST; .) // Sentinal.
	"@"
	(. if (HasWhitespace()) Err(L"Bad modifier"); .)
	(
		"Const" (. m = Modif::Const; .)
	|
		identifier
		(.
		switch (t->val[0]) {
		case L'A': case L'a':
			if (Matches(L"Abstract")) m = Modif::Abstract;
			break;
		case L'B': case L'b':
			if (Matches(L"Backed")) m = Modif::Backed;
			break;
		case L'D': case L'd':
			if (Matches(L"Deprecated")) m = Modif::Deprecated; //TODO: string_literal
			break;
		case L'F': case L'f':
			if (Matches(L"Flags")) m = Modif::Flags;
			break;
		case L'I': case L'i':
			if (Matches(L"Iterator")) m = Modif::Iterator;
			break;
		case L'M': case L'm':
			if (Matches(L"MustUse")) m = Modif::MustUse;
			break;
		case L'O': case 'o':
			if (Matches(L"Open")) m = Modif::Open; else
			if (Matches(L"Override")) m = Modif::Override;
			break;
		case L'R': case L'r':
			if (Matches(L"ReadOnly")) m = Modif::ReadOnly;
			break;
		case L'S': case L's':
			if (Matches(L"Shared")) m = Modif::Shared; else
			if (Matches(L"SI")) {
				m = Modif::SI;
				arg.si_arg = Modif::SI_default;
				if (_identifier == la->kind) {
					Get();
					if (Matches(L"BINARY")) arg.si_arg = Modif::SI_Binary; else
					if (Matches(L"LARGE")) arg.si_arg = Modif::SI_Large; else
					if (Matches(L"SMALL")) arg.si_arg = Modif::SI_Small;
					else Err(t->line, t->col, L"Unknown identifier after @SI");
				}
			} else
			if (Matches(L"Strict")) m = Modif::Strict;
			break;
		case L'U': case L'u':
			if (Matches(L"Unique")) m = Modif::Unique;
			break;
		case L'W': case L'w':
			if (Matches(L"WriteOnly")) m = Modif::WriteOnly;
			break;
		}
		if (Modif::LAST == m) SemErr(L"Invalid directive or modifier");
		.)
	)
	[ OptionalNewline ]
.
ModifiersClause<Modif &mods> (. ID(L"ModifiersClause", STMT) .)
=
	(.
	int m;
	ModifArg arg;
	.)
	Modifier<m, arg>
	(. mods.add(m); .)
	{
		Modifier<m, arg>
		(. mods.add(m); .)
	}
.
Module (. ID(L"Module", STMT) .)
=
	(. bool bProcEntry = false; .)
	[ Newline ]
	(
		"Program"
		(.
			module = new AST::Module(AST::Module::Program, t->line, t->col);
			context.push_back(_Program);
		.)
		[ "=" (. bProcEntry = module->procStart = true; .) ]
		identifier (. module->Name(t->val); .)
	|
		"Library"
		(.
			module = new AST::Module(AST::Module::Library, t->line, t->col);
			context.push_back(_Library);
		.)
		QualifiedName<_identifier>
	)
	SyncNewline<s_name>
	{ IF (la->kind == _Where)
		WhereStatement
	}
	{ IF (la->kind == _Require)
		RequireStatement
	}
	{
		(. Modif mods(this); .)
		[ ModifiersClause<mods> ]
		(
			ModuleMember<mods>
		|
			ModuleStatement<bProcEntry, mods>
		)
	}
.
ModuleMember<Modif &mods> (. ID(L"ModuleMember", STMT) .)
=
	( BaseUnitStatement<mods>
	| ClassStatement<mods>
	| ConstStatement<mods>
	| DeclareStatement<mods>
	| DimStatement<mods>
	| EnumStatement<mods>
	| FunctionStatement<mods>
	| MethodStatement<mods>
///	| NamespaceStatement<mods>
	| NewStatement<&mods>
	| ObjectStatement<&mods>
	| PropertyStatement<mods>
	| StructStatement<mods>
	| SubStatement<mods>
	| TraitStatement<mods>
	| UnitStatement<mods>
	)
.
ModuleStatement<bool bProcEntry, Modif &mods> (. ID(L"ModuleStatement", STMT) .)
=
	(. if (bProcEntry) Warn(L"Executable statements at module level ignored when entry point is a procedure"); .)
	(
		BlockStatement<mods>
	|
		(. mods.validate(); .)
		SimpleStatement SyncNewline<s_name>
	)
.
MultiplicativeExpression (. ID(L"Multiplicative", EXPR) .)
=
	PowerExpression { MultiplicativeOperator PowerExpression }
.
MultiplicativeOperator (. ID(L"MultiplicativeOperator", STMT) .)
=
	( '*' | '/' | "Div" | "Mod" | "Rem" )
.
/*N*/
Name (. ID(L"Name", STMT) .)
=
	( identifier
	| nullable_identifier
	| typed_identifier
	)
.
///NamespaceStatement<Modif &mods> (. ID(L"NamespaceStatement", STMT) .)
///=
///	(.
///	mods.allow(Modif::Deprecated);
///	mods.validate();
///	.)
///	"Namespace" QualifiedName<_identifier> SyncNewline<s_name>
///	{ ModuleMember }
///	"End"
///	(. Optional(_Namespace); .)
///	Newline
///.
NewBlockStatement (. ID(L"NewBlockStatement", STMT) .)
=
	(.
	int line, col;
	bool bInitExpr = false;
	wchar_t *type_name = nullptr; // TODO: make this a parameter
	.)
	"Begin" (. line = t->line; col = t->col; .)
	[
		"Call"
		[
			QualifiedName<0> // Default is "Add".
		]
		[
			CollectionInitializer
			(. bInitExpr = true; .)
		]
	|
		UserType
	]
	SyncNewline<s_name>
	[
		NewMember
		(. if (bInitExpr) SemErr(L"Expected END after initialization expression"); .)
		{ NewMember }
	]
	(. if (la->kind != _End) Err(line, col, L"NEW...BEGIN without END"); .)
	"End"
	(
		"New"
		(. if (option.End_block == NO) SemErr(L"END cannot have  block type because of @OPTION"); .)
	|
		identifier
		(. if (option.End_block == NO) SemErr(L"END cannot have  type name because of @OPTION"); .)
		(. if (!type_name || !Matches(type_name)) SemErr(L"END type name must be the same as NEW type name"); .)
	|
		(. if (option.End_block == YES) SemErr(L"END must have block type because of @OPTION"); .)
	)
	(. coco_string_delete(type_name); .)
.
NewMember (. ID(L"NewMember", STMT) .)
=
	[ Newline ]
	( NewStatement<nullptr>
	| ObjectStatement<nullptr>
	| dot IdentifierStatement SyncNewline<s_name>
	| ArgumentList SyncNewline<s_name>
	)
.
NewStatement<Modif *mods> (. ID(L"NewStatement", STMT) .)
=
	"New" UserType CallOrNew<_New, mods>
	SyncNewline<s_name>
.
Newline (. ID(L"Newline", STMT) .)
=
	line_break { line_break }
.
NullCoalescingExpression (. ID(L"NullCoalescing", EXPR) .)
=
	TypeExpression [ "|?" NullCoalescingExpression ]
.
NumericExpression<bool bMixedUnit> (. ID(L"Numeric", EXPR) .)
=
	(.
	static const wchar_t *s_msg = L"Bad fixed constant";
	bool bFixed = false;
	int line = la->line, col = la->col;
	.)
	[
		( "@" | fixed_literal )
		(.
		bFixed = true;
		if (HasWhitespace()) Err(line, col, s_msg);
		.)
	]
	(
		integer_literal
	|
		real_literal
		(. if ( (bFixed || _at_sign == la->kind) && L'!' == t->val[coco_string_length(t->val) - 1] ) Err(line, col, s_msg); .)
	)
	[
		(. if (bFixed || HasWhitespace()) Err(line, col, s_msg); .)
		"@"
	]
	[ IF (bMixedUnit || IsUnit())
		UnitOfMeasure
		[ NumericExpression<true> ]
	]
.
/*O*/
ObjectName (. ID(L"ObjectName", STMT) .)
=
	( identifier
	| nullable_identifier
	)
.
ObjectStatement<Modif *mods> (. ID(L"ObjectStatement", STMT) .)
=
	(.
	mods ? mods->allow(Modif::Deprecated) : false;
	bool bShared = mods ? mods->allow(Modif::Shared) : false;
	if (mods) mods->validate();

	int line, col;
	.)
	"Object" (. line = t->line; col = t->col; .)
	ObjectName
	[ "Is" UserType ]
	{ DoesClause }
	SyncNewline<s_name>
	{ ClassOrObjectMember<_Object> }
	(. if (la->kind != _End) Err(line, col, L"OBJECT without END"); .)
	"End"
	(. Optional(_Object); .)
	Newline
.
OptionalNewline (. ID(L"OptionalNewline", STMT) .)
=
	// TODO: Think about heuristics to warn about possible missing elements, for example:
	//     foo =
	//     bar = 1
	// which is correct code at this time.

	line_break
.
/*P*/
PassableType (. ID(L"PassableType", STMT) .)
=
	( PrimitiveType<NO_BITS> | UserType )
	[ Rank ]
.
PowerExpression (. ID(L"Power", EXPR) .)
=
	BitShiftExpression [ "^" PowerExpression ]
.
PrimaryExpression (. ID(L"Primary", EXPR) .)
=
	( char_literal
	| integer_constant
	| NumericExpression<false>
	| DateTimeExpression
	|
		(. std::wstring s; .)
		StringExpression<s>
	| [ "Class" | "Trait" ]
		Name [ TypeArgumentList ]
		{
			// Syntactic sugar for argumentless proc call.
			// Lets one do "proc?" or "proc1?proc2?proc3?" instead of
			// "proc()" or "proc1().proc2().proc3()", respectively.

			question
			[ /// IF (IsIdentifier(la->kind))
				Name [ TypeArgumentList ]
			]
		}
	| PrimitiveType<YES_BITS>
	| "(" EnclosedExpression ")"
	| DivisionFunction
	| "Base"
	| "Self"
	| "#Null"
	| malformed_char_literal     (. SemErr(L"Bad character constant"); .)
	| malformed_integer_literal  (. SemErr(L"Bad integer constant"); .)
	| malformed_real_literal     (. SemErr(L"Bad real constant"); .)
	| malformed_string_literal   (. SemErr(L"Bad string constant"); .)
	)
.
PrimitiveType<bool bBits> (. ID(L"PrimitiveType", STMT) .)
=
	(. int kind = 0; .)
	( "Boolean" | "Char" | "DateTime"
	| "SafeString" | "String"  //TODO: Limit on where can use SafeString.
	| IntegerType<kind>
	| FloatingPointType<kind>
	| FixedPointType<kind>
	| BitFieldType<kind>  (. if (!bBits) SemErr(L"Bit field not permitted here"); .)
	)
.
///PropertyOrCall (. ID(PropertyOrCall) .)
///=
///	Name
///	[ IF (IsCall()) EnclosedArgumentList ]
///.
PropertySignature<Modif &mods, int &line, int &col> (. ID(L"PropertySignature", STMT) .)
=
	(. bool explicit_array = false; .)
	"Property" (. line = t->line; col = t->col; .)
	[ DimOrVar (. explicit_array = true; .) ]
	( IF (IsPropertySelf())
		( typed_identifier | "Self" ) (. if (explicit_array) SemErr(L"Cannot use DIM or VAR with SELF"); .)
		EnclosedParameterList<_Property>
	| IF (!explicit_array && IsPropertyWithParam())
		Name EnclosedParameterList<_Property>
	| DeclaratorList<NO_BITS>
	)
	[ "Does" identifier dot identifier ]
	SyncNewline<s_name>
.
PropertyStatement<Modif &mods> (. ID(L"PropertyStatement", STMT) .)
=
	(.
	bool bAbstract  = mods.allow(Modif::Abstract);
	bool bBacked    = mods.allow(Modif::Backed);
	mods.allow(Modif::Deprecated);
	bool bIterator  = mods.allow(Modif::Iterator);
	bool bOpen      = mods.allow(Modif::Open);
	bool bOverride  = mods.allow(Modif::Override);
	bool bReadOnly  = mods.allow(Modif::ReadOnly);
	bool bShared    = mods.allow(Modif::Shared);
	bool bWriteOnly = mods.allow(Modif::WriteOnly);
	mods.validate();

	int line, col;
	.)
	PropertySignature<mods, line, col>
	[ IF (la->kind == _Get || la->kind == _Set)
		[
			"Get"
			(. if (bWriteOnly) SemErr(L"Cannot have GET with @WriteOnly"); .)
			Newline
			(.
			if (bIterator) context.push_back(_Yield);
			context.push_back(_Property);
			.)
			{ Statement }
			(.
			context.pop_back();
			if (bIterator) context.pop_back();
			.)
		]
		[
			"Set"
			(. if (bIterator || bReadOnly) SemErr(L"Cannot have SET with @Iterator or @ReadOnly"); .)
			(
				FormalParameterList<_Set>
			|
				(. SemErr(L"SET must have one parameter"); .)
			)
			SyncNewline<s_name> 
			(. context.push_back(_Property); .)
			{ Statement }
			(. context.pop_back(); .)
		]
	(. if (la->kind != _End) Err(line, col, L"PROPERTY without END"); .)
		"End"
	(. Optional(_Property); .)
		Newline
	]
.
/*Q*/
QualifiedName<int limit> (. ID(L"QualifiedName", STMT) .)
=
	(. const wchar_t *msg = L"Namespace or type name expected"; .)
	Name
		(. if ((limit == _identifier || la->kind == _dot) && t->kind != _identifier) SemErr(msg); .)
	{ dot Name  
		(. if (limit == _identifier && t->kind != _identifier) SemErr(msg); .)
	}
.
/*R*/
RaiseStatement (. ID(L"RaiseStatement", STMT) .)
=
	"Raise"
	(
		// Raise event.
		"Event" Name [ ArgumentList ]
	|
		// Raise exception.
		Expression
	|
		// Re-raise exception.
		(.
		if (std::find(context.begin(), context.end(), _Catch) == context.end())
		    SemErr(L"RAISE expression is mandatory here");
		.)
	)
.
Rank (. ID(L"Rank", STMT) .)
=
	"*" integer_literal
.
ReDimClause (. ID(L"ReDimClause", STMT) .)
=
	QualifiedName<0>
	"(" EnclosedExpression
	{ comma EnclosedExpression }
	")"
.
ReDimStatement (. ID(L"ReDimStatement", STMT) .)
=
	"ReDim" ReDimClause
	{ comma ReDimClause }
.
RequireComparison (. ID(L"RequireComparison", STMT) .)
=
	// TODO: strings can only be "=" or "<>".
	( [ version_literal ( "<" | "<=" ) ]  // Eg 1.0.0 <= version < 2.0.0
		identifier
		ComparisonOperator ( string_literal | version_literal )
	| "(" RequireLogic ")"
	)
.
RequireLogic (. ID(L"RequireLogic", STMT) .)
=
	RequireComparison
	{ ( "And" | "Or" ) RequireComparison }
.
RequireStatement (. ID(L"RequireStatement", STMT) .)
=
	"Require"
	QualifiedName<_identifier> [ "As" identifier ]
	( { comma QualifiedName<_identifier> [ "As" identifier ] }
	| "Where" RequireLogic
	)
	SyncNewline<s_name>
	(. if (la->kind == _Where) Err(la->line, la->col, L"WHERE clause must be on the same logical line as REQUIRE"); .)
.
ReturnStatement (. ID(L"ReturnStatement", STMT) .)
=
	"Return" [ Expression ]
.
ReturnTypeClause (. ID(L"ReturnTypeClause", STMT) .)
=
	( AsTypeClause<NO_BITS>
	| InUnitClause
	)
.
/*S*/
SelectStatement<Modif &mods> (. ID(L"SelectStatement", STMT) .)
=
	(.
	bool bStrict   = mods.allow(Modif::Strict);
	mods.validate();

	int line, col;
	case_type clause = CASE_ZERO;
	.)
	"Select" (. line = t->line; col = t->col; .)
	(. Optional(_Case); .)
	TolExpression
	SyncNewline<s_name>
	(. context.push_back(_Select); .)
	{ CaseClause<clause> }
	(. context.pop_back(); .)
	(. if (la->kind != _End) Err(line, col, L"SELECT without END"); .)
	"End"
		(. if (clause == CASE_ZERO) SemErr(L"SELECT must have a minimum of one CASE"); .)
		(. if (option.Select_Else == SELECT_ELSE && clause != CASE_ELSE) SemErr(L"SELECT must have CASE ELSE because of @OPTION"); .)
	(. Optional(_Select); .)
	Newline
.
SimpleExpression (. ID(L"Simple", EXPR) .)
=
	// Related: IdentifierStatement
	PrimaryExpression
	{
		( dot   // Member access
		| ".?"  // Null-conditional member access (eg "#obj.?proc?")
		| "??"  // Method call with null-conditional member access (eg "#proc1??proc2?")
		)
		Name [ TypeArgumentList ]
	| "!" Name  // Dictionary access
	| EnclosedArgumentList
	}
.
SimpleStatement (. ID(L"SimpleStatement", STMT) .)
=
	( CallStatement
	| GotoStatement
	| ExitStatement
	| IdentifierStatement
	| RaiseStatement
	| ReDimStatement
	| ReturnStatement
	| YieldStatement
	)
.
SimpleStatementError (. ID(L"SimpleStatementError", STMT) .)
=
	(. Err(la->line, la->col, L"This statement not permitted with one-line IF...ELSE"); .)
	(. Modif mods(this); .)
	BlockStatement<mods>
.
Statement (. ID(L"Statement", STMT) .)
=
	(. Modif mods(this); .)
	[ ModifiersClause<mods> ]
	(
		BlockStatement<mods>
	|
		DeclarationStatement<mods>
	|
		(. mods.validate(); .)
		SimpleStatement SyncNewline<s_name>

	)
.
StringExpression<std::wstring &res> (. ID(L"String", EXPR) .)
=
	(. const std::wstring sep(S_PATH_SEP); .)
	( string_literal | string_constant ) (. res += StringValue(t->val); .)
	{ IF (la->kind == _string_constant || la->kind == _string_literal || la->kind == _slash || la->kind == _backslash)
		[
			"/"
			(. if (option.String_bk_slash == TERNARY1) SemErr(L"Must use backslash because of @OPTION"); .)
			(. res += sep; .)
		|
			"\\"
			(. if (option.String_bk_slash == TERNARY2) SemErr(L"Must use slash because of @OPTION"); .)
			(. res += sep; .)
		]
		( string_literal | string_constant ) (. res += StringValue(t->val); .)
	}
	(. if (args.v >= Args::STMT) wprintf(L"\n[%ls]", res.c_str()); .) //TEMP
.
StructStatement<Modif &mods> (. ID(L"StructStatement", STMT) .)
=
	(.
	mods.allow(Modif::Deprecated);
	bool bMustUse  = mods.allow(Modif::MustUse);
	mods.validate();

	int line, col;
	bool generic = false;
	.)
	"Struct" (. line = t->line; col = t->col; .)
	identifier
	[ TypeParameterList<_Struct> (. generic = true; .) ]
	[ "Is" ValueType ]
	{ DoesClause }
	[ WhereClause<_Struct, generic> ]
	SyncNewline<s_name>
	{ WhereClause<_Struct, generic> SyncNewline<s_name> }
	(. context.push_back(_Struct); .)
	{ StructState }
	{ StructProcedure }
	(. context.pop_back(); .)
	(. if (la->kind != _End) Err(line, col, L"STRUCT without END"); .)
	"End"
	(. Optional(_Struct); .)
	Newline
.
StructProcedure (. ID(L"StructProcedure", STMT) .)
=
	(. Modif mods(this); .)
	( ConstructorStatement<mods>
	| FunctionStatement<mods>
	| MethodStatement<mods>
	| PropertyStatement<mods>
	| SubStatement<mods>
	|
		(. Err(la->line, la->col, L"STRUCT cannot have DESTRUCTOR"); .)
		DestructorStatement<mods>
	)
.
StructState (. ID(L"StructState", STMT) .)
=
	(. Modif mods(this); .)
	[ ModifiersClause<mods> ]
	(
		(.
		mods.allow(Modif::Deprecated);
		mods.allow(Modif::Shared);
		mods.validate();
		.)
		[ DimOrVar ] DeclaratorList<YES_BITS>
		SyncNewline<s_name>
	| ConstStatement<mods>
	| EnumStatement<mods>
	| EventStatement
	| StructStatement<mods>
	|
		(. Err(la->line, la->col, L"STRUCT cannot have CLASS member"); .)
		ClassStatement<mods>
	)
.
SubSignature<Modif &mods, int &line, int &col, bool &bGeneric> (. ID(L"SubSignature", STMT) .)
=
	"Sub" (. line = t->line; col = t->col; .)
	Name
	(. bool bReturns = (t->kind == _typed_identifier); .)
	[
		TypeParameterList<_Sub>
		(. bGeneric = true; .)
	]
	[
		EnclosedParameterList<_Sub>
		[
			ReturnTypeClause
			(. bReturns = true; .)
		]
	|
		UnenclosedParameterList<_Sub>
	|
		ReturnTypeClause
		(. bReturns = true; .)
	]
	[
		"Handles"
		(. if (bReturns) SemErr(L"Event handlers cannot have a return type"); .)
		QualifiedName<_identifier>
	]
	[
		WhereClause<_Sub, bGeneric>
	]
	(.
	if (!bReturns && mods.has(Modif::Const) || mods.has(Modif::MustUse))
		SemErr(L"SUB must have return type because of modifier(s)");
	.)
	SyncNewline<s_name>
.
SubStatement<Modif &mods> (. ID(L"SubStatement", STMT) .)
=
	(.
	bool bConst    = mods.allow(Modif::Const);
	mods.allow(Modif::Deprecated);
	bool bIterator = mods.allow(Modif::Iterator);
	bool bMustUse  = mods.allow(Modif::MustUse);
	bool bShared   = mods.allow(Modif::Shared);
	mods.validate();

	int line, col;
	bool bGeneric = false;
	.)
	SubSignature<mods, line, col, bGeneric>
	{
		WhereClause<_Sub, bGeneric>
		SyncNewline<s_name>
	}
	(.
	if (bIterator) context.push_back(_Yield);
	context.push_back(_Sub);
	.)
	{ Statement }
	(.
	context.pop_back();
	if (bIterator) context.pop_back();
	.)
	(. if (la->kind != _End) Err(line, col, L"SUB without END"); .)
	"End"
	(. Optional(_Sub); .)
	Newline
.
SyncNewline<const wchar_t *name> (. ID(L"SyncNewline", STMT) .)
=
	(.
	wchar_t *msg = NULL;
	while (!errors->count // Try this to prevent too many errors.
	    && !(la->kind == _EOF || la->kind == _line_break)) {
		if (!msg) msg = coco_string_create_append(L"This symbol not expected in ", name);
		Get();
		Err(msg);
	}
	coco_string_delete(msg);
	.)
	line_break { line_break }
.
SyncSeparator<const wchar_t *name> (. ID(L"SyncSeparator", STMT) .)
=
	(
		SyncNewline<name>
	|
		";" [ SyncNewline<name> ]
	)
.
/*T*/
TolExpression (. ID(L"TolExpr", EXPR) .)
=
	Expression
	[
		"Tol" real_literal
		[
			LogicalOperator
			(. SemErr(L"Cannot have expression after TOL clause"); .)
			Expression
		]
	]
.
TraitMember (. ID(L"TraitMember", STMT) .)
=
	(. Modif mods(this); .)
	[ ModifiersClause<mods> ]
	( DimStatement<mods>
	| FunctionStatement<mods>
	| MethodStatement<mods>
	| PropertyStatement<mods>
	| StructStatement<mods>
	| SubStatement<mods>
	)
.
TraitStatement<Modif &mods> (. ID(L"TraitStatement", STMT) .)
=
	(. // Permit @MustUse?
	bool bAbstract = mods.allow(Modif::Abstract);
	mods.allow(Modif::Deprecated);
	mods.validate();

	int line, col;
	bool generic = false;
	.)
	"Trait" (. line = t->line; col = t->col; .)
	identifier
	[ TypeParameterList<_Trait> (. generic = true; .) ]
	{ DoesClause }
	[ WhereClause<_Trait, generic> ]
	SyncNewline<s_name>
	{ WhereClause<_Trait, generic> SyncNewline<s_name> }
	{ TraitMember }
	(. if (la->kind != _End) Err(line, col, L"TRAIT without END"); .)
	"End"
	(. Optional(_Trait); .)
	Newline
.
TryStatement (. ID(L"TryStatement", STMT) .)
=
	(. int line, col; .)
	"Try" (. line = t->line; col = t->col; .)
	Newline
	{ Statement }
	{ CatchClause }
	[
		"Finally" Newline
		(. context.push_back(_Finally); .)
		{ Statement }
		(. context.pop_back(); .)
	]
	(. if (la->kind != _End) Err(line, col, L"TRY without END"); .)
	"End"
	(. Optional(_Try); .)
	Newline
.
TypeArgumentList (. ID(L"TypeArgumentList", STMT) .)
=
	'[' PassableType { WEAK comma PassableType } ']'
.
TypeClause<bool bBits> (. ID(L"TypeClause", STMT) .)
=
	( AsTypeClause<bBits>
	| InUnitClause
	)
.
TypeConversion (. ID(L"TypeConversion", EXPR) .)
=
	( "As" ConvertibleType
	| InUnitClause
	)
.
TypeExpression (. ID(L"Type", EXPR) .)
=
	ConcatenationExpression [ IsExpression | TypeConversion ]
.
TypeParameter<int parent> (. ID(L"TypeParameter", STMT) .)
=
	[
		( "In" | "Out" )
		(. if (parent != _Event && parent != _Trait) SemErr(L"IN and OUT are permitted only with EVENT and TRAIT"); .)
	]
	identifier
.
TypeParameterList<int parent> (. ID(L"TypeParameterList", STMT) .)
=
	"["
	TypeParameter<parent>
	{ WEAK comma TypeParameter<parent> }
	"]"
.
/*U*/
UnaryExpression (. ID(L"Unary", EXPR) .)
=
	{ UnaryOperator } SimpleExpression
.
UnaryOperator (. ID(L"UnaryOperator", STMT) .)
=
	( '+' | '-' | "Not" )
.
UnenclosedArgumentList (. ID(L"UnenclosedArgumentList", STMT) .)
=
	(
		Argument
	|
		comma (. SemErr(L"First argument is missing"); .)
	)
	{
		WEAK comma
		( IF (la->kind == _line_break)
			Newline
			Argument
		|
			Argument
		|
		)
	}
	(. if (t->kind == _comma) SemErr(L"Last argument is missing"); .)
.
UnenclosedParameterList<int parent> (. ID(L"UnenclosedParameterList", STMT) .)
=
	(. param_validator param(this, parent); .)
	FormalParameter<param>
	{
		WEAK comma [ OptionalNewline ]
		FormalParameter<param>
	}
.
UnitAlias (. ID(L"UnitAlias", STMT) .)
=
	(. int number = -1; .)
	[
		integer_literal  // Grammatical number: 1 = singular, 2 = plural, 0 = zero & singular.
		(. if (t->val[0] >= L'0' && t->val[0] <= L'2' && t->val[1] == L'\0') number = t->val[0] - L'0';
		else SemErr(L"number must be 0, 1, or 2"); .)
	]
	identifier 
	[
		( "+" | "-" ) // Plurals by "unit+suffix" or "prefix-unit".
		(. if (number > 0) SemErr(L"Name cannot have a plural part after 1 or 2"); .)
		identifier
	]
.
UnitOfMeasure (. ID(L"UnitOfMeasure", STMT) .)
=
	(
		identifier
	|
		"("
		identifier
		{ [ "*" | "/" ] identifier }
		")"
	)
.
UnitParameter (. ID(L"UnitParameter", STMT) .)
=
	"(" identifier InUnitClause ")"
.
UnitStatement<Modif &mods> (. ID(L"UnitStatement", STMT) .)
=
	(.
	mods.allow(Modif::Deprecated);
	bool bSI       = mods.allow(Modif::SI);
	mods.validate();
	.)
	"Unit"
	UnitAlias { UnitAlias }
	[ UnitParameter "=" AdditiveExpression
	| "=" AdditiveExpression
	]
	SyncNewline<s_name>
	// TODO: Think about block construct to do range tests, for example:
	//  Unit Kelvin K
	//  Set value
	//      If value < 0.0 Then Raise RangeError
	//  End Unit
.
UserType (. ID(L"UserType", STMT) .)
=
	QualifiedName<_identifier> [ TypeArgumentList ]
.
/*V*/
ValueType (. ID(L"ValueType", STMT) .)
=
	( PrimitiveType<NO_BITS> | UserType )
.
/*W*/
WhenStatement<bool isPreconditional, when_map &whens> (. ID(L"WhenStatement", STMT) .)
=
	"When"
	( identifier
	| "Each"
		(. if (option.When_Each_Else == TERNARY2) SemErr(L"Must use ELSE because of @OPTION"); .)
	| "Else" // Equivalent to "Each".
		(. if (option.When_Each_Else == TERNARY1) SemErr(L"Must use EACH because of @OPTION"); .)
	)
	(.
	int kind = t->kind;
	// Change label to upper case.
	wchar_t *val = (t->kind != _Else) ? t->val : L"EACH";
	std::wstring id(val);
	std::transform(id.begin(), id.end(), id.begin(), std::towupper);
	switch ((whens[id] += 2)) {
	case 2: // Label not in Begin.
		if (option.When_Begin_id && kind == _identifier) {
			SemErr(L"WHEN label must be declared with BEGIN because of @OPTION");
		}
		break;
	case 3: // Label in Begin and When.
		break;
	default: // Duplicate.
		if (kind == _identifier) SemErr(L"Loop cannot have more than one WHEN with the same label");
		else SemErr(L"Loop cannot have more than one WHEN EACH or WHEN ELSE");
		break;
	}
	.)
	Newline
	{ Statement }
.
WhereClause<int block, bool generic> (. ID(L"WhereClause", STMT) .)
=
	"Where"
	(. if (!generic) SemErr(L"Declared element is missing generic type parameter(s)"); .)
	Constraint<block>
	{
		WEAK comma [ OptionalNewline ]
		Constraint<block>
	}
.
WhereStatement (. ID(L"WhereStatement", STMT) .)
=
	"Where" (. int line = t->line, col = t->col; .)
	identifier  (. wchar_t *id = coco_string_create(t->val); .)
	"="
	(
		DateTimeExpression
	|
		(. std::wstring s; .)
		StringExpression<s>
		(. module->Add(new AST::ModuleWhere(id, _wcsdup(s.c_str()), AST::STRING, line, col)); .)
	|
		version_literal 
		(. module->Add(new AST::ModuleWhere(id, coco_string_create(t->val), AST::VERSION, line, col)); .)
	)
	SyncNewline<s_name>
.
WhileOrUntil (. ID(L"WhileOrUntil", STMT) .)
=
	( "While"
	| "Until"
	)
.
WhileStatement (. ID(L"WhileStatement", STMT) .)
=
	(. int line, col; .)
	"While" (. line = t->line; col = t->col; .)
	TolExpression
	SyncNewline<s_name>
	(. context.push_back(_While); .)
	[ LoopBody<PRECONDITIONAL> ]
	(. context.pop_back(); .)
	(. if (la->kind != _End) Err(line, col, L"WHILE without END"); .)
	"End"
	(. Optional(_While); .)
	Newline
.
/*X*/
/*Y*/
YieldStatement (. ID(L"YieldStatement", STMT) .)
=
	"Yield"
	(.
	if (std::find(context.rbegin(), context.rend(), _Yield) == context.rend())
	    SemErr(L"Cannot use YIELD without @ITERATOR on procedure");
	if (std::find_if(context.rbegin(), context.rend(),
	    [](int i) { return (_Catch == i || _Finally == i); }) != context.rend())
	    SemErr(L"Cannot use YIELD in CATCH or FINALLY");
	.)
	Expression
.
/*Z*/

END ViviFire.
